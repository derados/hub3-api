{% extends 'base.twig' %}

{% block content %}
{% filter markdown %}

# HUB-3 Barcode API

The API specifies a single endpoint:

```
POST /api/v1/barcode
```

Data is sent JSON encoded in the request body. Make sure to set your content
type header:

```
Content-Type: application/json
```

## Request body

```javascript
{
    "renderer": "image",
    "options": { ... }
    "data": { ... }
}
```

The request body should contain a JSON object with the following keys:

* **renderer** - The name of the renderer to use
* **options** - The renderer options (depends on the renderer)
* **data** - Barcode data

## Barcode data

The following data is required to create a HUB-3 barcode.

| Key                  | Type           | Description                          |
| -------------------- | -------------- | ------------------------------------ |
| amount               | decimal (15,2) | Transaction amount in HRK            |
| purpose              | text (4)       | Purpose code by ISO 20022 standard   |
| description          | text (35)      | Transaction description              |
| **sender**           | object         | Sender data                          |
| > sender.name        | text (30)      | Name and surname, or company name    |
| > sender.street      | text (30)      | Address (street and number)          |
| > sender.place       | text (27)      | Address (post code and place name)   |
| **receiver**         | object         | Receiver data                        |
| > receiver.name      | text (30)      | Name and surname, or company name    |
| > receiver.street    | text (30)      | Address (street and number)          |
| > receiver.place     | text (27)      | Address (post code and place name)   |
| > receiver.iban      | text (21)      | Account number (IBAN)                |
| > receiver.model     | text (2)       | Payment reference model              |
| > receiver.reference | text (21)      | Payment reference                    |

Example barcode data:

```javascript
{
    "amount": 100000,
    "sender": {
        "name": "Ivan Habunek",
        "street": "Savska cesta 13",
        "place": "10000 Zagreb"
    },
    "receiver": {
        "name": "Big Fish Software d.o.o.",
        "street": "Savska cesta 13",
        "place": "10000 Zagreb",
        "iban": "HR6623400091110651272",
        "model": "00",
        "reference": "123-456-789"
    },
    "purpose": "ANTS",
    "description": "Developing a HUB-3 API"
}
```

The data is validated by a JSON schema which is available
[here](/schema/hub3.json).


## Renderers

### Image Renderer

Returns the barcode as a JPG, PNG or GIF image.

#### Options

| Name    | Value                                    | Deafult   |
| ------- | ---------------------------------------- | --------- |
| format  | Image format. One of: jpg, png, or gif.  | png       |
| padding | Padding size in pixels.                  | 20        |
| color   | Barcode color as a hex code.             | `#000000` |
| bgColor | Background color as a hex code.          | `#ffffff` |
| scale   | Width of the single unit in the barcode  | 3         |
| ratio   | Width to height ration of a single unit  | 3         |

Sample usage:

```javascript
{
    "renderer": "image",
    "options": {
        "format": "png",
        "color": "#00ff00"
    }
    "data": { ... }
}
```

Sample output:

![Sample HUB-3 barcode](/static/barcode.png)

### SVG Renderer

Returns the barcode in SVG XML format.

#### Options

| Name    | Value                                    | Deafult   |
| ------- | ---------------------------------------- | --------- |
| scale   | Width of the single unit in the barcode  | 3         |
| ratio   | Width to height ration of a single unit  | 3         |
| color   | Barcode color as a hex code.             | `#000000` |


Sample usage:

```javascript
{
    "renderer": "svg",
    "options": {
        "scale": 3,
        "ratio": 3,
        "color": "#000000"
    }
    "data": { ... }
}
```

Sample output (truncated):

```markup
<?xml version="1.0"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" height="477" width="513" version="1.1">
  <description>HUB3 barcode generated by {{ url("about") }}</description>
  <g id="barcode" fill="black" stroke="none">
    <rect x="0" y="0" width="3" height="9"/>
    <rect x="3" y="0" width="3" height="9"/>
    <rect x="6" y="0" width="3" height="9"/>
    <rect x="9" y="0" width="3" height="9"/>
    <rect x="12" y="0" width="3" height="9"/>
    ...
  </g>
</svg>
```

### JSON Renderer

Returns the barcode pixel grid in JSON. This can be used to draw your own
barcode.

This renderer does not take any options.

Sample usage:

```javascript
{
    "renderer": "json",
    "options": {
    }
    "data": { ... }
}
```

Sample output (truncated):

```javascript
[
    [1,1,1,1,1,1,1,1,0,1,0,1,0,1,0,0,0,1,1,0,1,0,1,0,0,0,1,1,0,0,0,...],
    [1,1,1,1,1,1,1,1,0,1,0,1,0,1,0,0,0,1,1,1,1,0,1,0,1,1,0,1,1,0,0,...],
    [1,1,1,1,1,1,1,1,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,0,0,0,1,1,1,1,0,...],
    [1,1,1,1,1,1,1,1,0,1,0,1,0,1,0,0,0,1,1,1,1,0,1,0,0,1,0,1,1,1,1,...],
    [1,1,1,1,1,1,1,1,0,1,0,1,0,1,0,0,0,1,1,1,1,0,1,0,1,1,1,1,0,1,1,...],
    [1,1,1,1,1,1,1,1,0,1,0,1,0,1,0,0,0,1,1,1,1,0,1,0,1,1,1,1,1,0,1,...],
    ...
]
```

{% endfilter %}
{% endblock %}
